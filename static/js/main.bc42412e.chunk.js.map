{"version":3,"sources":["component/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","Contact","React","lazy","About","Projects","Home","App","updateWindowDimensions","deviceWidth","window","innerWidth","deviceHeight","innerHeight","setState","width","height","desktop","state","this","addEventListener","basename","process","Navbar","collapseOnSelect","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","fallback","exact","path","component","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTASeA,MANf,WACI,OACI,yBAAKC,UAAU,Y,+BCCjBC,G,MAAUC,IAAMC,MAAK,kBAAM,iCAC3BC,EAAQF,IAAMC,MAAK,kBAAM,gCACzBE,EAAWH,IAAMC,MAAK,kBAAM,gCAC5BG,EAAOJ,IAAMC,MAAK,kBAAM,sDA6DfI,E,kDA1Db,aAAe,IAAD,8BACZ,gBASFC,uBAAyB,WACvB,IAAMC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAC5B,EAAKC,SAAS,CAAEC,MAAON,EAAaO,OAAQJ,IACzCH,EAAY,KAAOG,EAAa,KACjC,EAAKE,SAAS,CAAEG,SAAS,KAb3B,EAAKC,MAAQ,CAAEH,MAAO,EAAGC,OAAQ,EAAGC,SAAS,GAFjC,E,gEAMZE,KAAKX,yBACLE,OAAOU,iBAAiB,SAAUD,KAAKX,0B,+BAavC,OACE,6BACKW,KAAKD,MAAMD,QACV,yBAAKjB,UAAU,cACf,kBAAC,IAAD,CAAQqB,SAAUC,eAChB,kBAACC,EAAA,EAAD,CAAQvB,UAAU,OAAOwB,kBAAgB,EAACC,OAAO,MAC/C,kBAACF,EAAA,EAAOG,MAAR,CAAc1B,UAAU,gBAAe,kBAAC,IAAD,CAAM2B,GAAG,KAAT,cACvC,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,0BAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKhC,UAAU,SACb,kBAAC,IAAD,CAAM2B,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAKN,kBAAC,WAAD,CAAUM,SAAU,6BAAK,kBAAC,EAAD,QACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO6B,KAAK,YAAYC,UAAW/B,IACnC,kBAAC,IAAD,CAAO8B,KAAK,SAASC,UAAWhC,IAChC,kBAAC,IAAD,CAAO+B,KAAK,WAAWC,UAAWnC,KAEpC,4BAAQD,UAAU,eAChB,yBAAKA,UAAU,qCAAf,sBACA,iDAMJ,yBAAKA,UAAU,eAAc,yE,GArDzBqC,aCCEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc42412e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { Component,Suspense } from 'react';\nimport './App.css';\nimport Loader from './component/Loader/Loader.js';\nimport { Route, Link, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst Contact = React.lazy(() => import('./container/Contact'));\nconst About = React.lazy(() => import('./container/About'));\nconst Projects = React.lazy(() => import('./container/Projects/Projects'));\nconst Home = React.lazy(() => import('./container/Home'));\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = { width: 0, height: 0, desktop: false };   \n  } \n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    const deviceWidth = window.innerWidth;\n    const deviceHeight = window.innerHeight;\n    this.setState({ width: deviceWidth, height: deviceHeight });\n    if(deviceWidth>768 && deviceHeight<800){\n      this.setState({ desktop: true });\n    }\n  };\n\n  render() { \n    return (\n      <div>\n          {this.state.desktop ?\n            <div className=\"AppStyling\">\n            <Router basename={process.env.PUBLIC_URL}>\n              <Navbar className=\"navb\" collapseOnSelect expand=\"lg\">\n                <Navbar.Brand className=\"navbar-brand\"><Link to=\"/\">Portfolio</Link></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                  <Nav className=\"route\">\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/about\">About</Link>\n                    <Link to=\"/contact\">Contact</Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n      \n              <Suspense fallback={<div><Loader /></div>}>\n                <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <Route path=\"/projects\" component={Projects} />\n                  <Route path=\"/about\" component={About} />\n                  <Route path=\"/contact\" component={Contact} />\n                </Switch>\n                <footer className=\"page-footer\">\n                  <div className=\"footer-copyright text-center py-3\">Karan's Portfolio | \n                  <span> Â© 2021</span>\n                  </div>\n                </footer>\n              </Suspense>\n            </Router>\n          </div>\n            : <div className=\"deviceError\"><b>Not available on mobile devices yet!</b></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}